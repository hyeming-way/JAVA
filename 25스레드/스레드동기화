
스레드 동기화 (Thread Synchronization)란?
  - 스레드 동기화는 멀티스레드 환경에서 여러 스레드가 공유 자원에 접근할 때 발생할 수 있는 문제를 방지하기 위해
    스레드의 실행 순서를 제어하는 기법이다.
    
    
    
스레드 동기화 기법이 왜 필요한가?
  - 멀티스레드 프로그래밍에서 여러 스레드가 **공유 자원(변수, 파일, 데이터베이스 등)에 동시에 접근하면
    데이터 충돌이나 불일치 문제(경쟁 상태, race condition)**가 발생할 수 있다.
    예를 들어, 두 개의 스레드가 같은 변수 값을 수정한다고 할 때,
    실행 순서에 따라 예상치 못한 결과가 나올 수 있다. 이를 방지하기위해 공유자원 스레드 동기화가 필요하다.
    
    
    
자바에서 스레드 동기화 기법

  1. synchronized 예약어 사용(메소드 동기화)
  	   - synchronized 키워드를 사용하면 한 번에 하나의 스레드만 해당 메서드에 접근 가능함
  	   - 공유 객체의 데이터 일관성을 보장하지만, 다른 스레드가 대기해야하므로 성능 저하가 발생할 수 있음.
  	   
  	   예제 : SynchronizedMethodExample.java   
  	      
  2. synchronized 블록 (특정 코드 블록 동기화)
  	   - 메서드 전체가 아니라 특정 코드 블록만 동기화하여 필요한 부분만 잠그므로 성능 향상 기능
  	   - synchronized (lock) 형태로 사용하며, 객체를 기준으로 락을 설정함.	   
  	   
  	   예제 : SynchronizedBlockExample.java   
	
  3. ReentrantLock (명시적 락 제어) -- JDK 17버전 이상
  	   - synchronized보다 더 유연한 명시적 락을 사용할 수 있음.
  	   - lock.lock()으로 락을 얻고, lock.unlock()으로 해제해야 함.
  	   - try-finally를 사용하여 항상 락을 해제하는 것이 중요함
  	   
  	   예제 : ReentrantLockExample.java  
    
  4. Semaphore (동시 접근 제한)

	   - Semaphore를 사용하면 한 번에 여러 개의 스레드가 공유 자원에 접근 가능하지만, 개수를 제한할 수 있음.
	   - 데이터베이스 연결 풀, 네트워크 요청 제한 등에 사용됨.
	   - Semaphore (세마포어)란?
		 Semaphore는 동시 접근을 제한하는 방법을 제공하는 동기화 객체입니다. 
		 주로 공유 자원에 대해 동시 접근 가능한 스레드 수를 제한하고자 할 때 사용됩니다. 
		 예를 들어, 데이터베이스 연결 풀(DB Connection Pool)이나 
		 네트워크 요청을 처리할 때 특정 자원에 대한 접근을 일정 개수로 제한하고 싶을 때 유용합니다.

 	   - 기본 동작
	     Semaphore는 내부적으로 카운터 값을 가지고 있습니다. 
	     이 카운터는 동시 접근할 수 있는 스레드의 개수를 나타냅니다. 
	     스레드가 Semaphore를 사용하여 자원에 접근하려 할 때, 
	     카운터가 양수이면 자원에 접근할 수 있고, 카운터가 0이면 자원에 접근하지 못하고 대기하게 됩니다.

	   - 주요 메서드
			acquire(): 카운터를 1 감소시키고, 카운터가 0이면 자원을 사용할 수 있을 때까지 대기합니다.
					   스레드가 자원을 사용하고자 할 때 호출합니다.
			
			release(): 카운터를 1 증가시킵니다. 자원 사용이 끝나면 호출하여, 다른 대기 중인 스레드가 자원을 사용할 수 있게 합니다.
		
			availablePermits(): 현재 세마포어가 허용하는 남은 자원 수를 반환합니다.
		
			tryAcquire(): acquire()와 유사하지만, 대기하지 않고 바로 자원 사용 여부를 확인합니다. 
			              사용할 수 있으면 true를 반환하고, 없으면 false를 반환합니다. 
 
 
	    예제 : SemaphoreExample.java  
	 
	    응용예제 : 스레드간의 동기화문제가 발생시 동기화처리 예제 - SyncThreadEx1.java (화장실)
	    응용예제2 : 스레드간의 동기화문제가 발생시 동기화처리 예제 - SyncThreadEx2.java (자판기)
	




