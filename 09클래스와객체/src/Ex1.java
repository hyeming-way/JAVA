/*
1.객체지향 프로그래밍(Object-Oriented Programming)
->현실세계에 존재하는 사물 과 대상, 그리고 그에따른 동작(행위)을 
  있는그대로 실체화시키는 형태의 프로그래밍 임.


2.객체(Object)
->현실세계 의 속성(데이터,상태) + 동작(기능,행동)을 가진 
  모든 물건 또는 대상(사람)을 의미.
  예)삼성_컴퓨터,  한샘_책상,  자바_책, 과일장수_철수, 과일구매자_영희    등등...

3.객체(Object)의 구성 
->속성(데이터) + 동작(기능,행동)

*/

//과일장수 이야기  스토리~
/*
	[ 현실 세계 상황 재연 1 ]
	"나는 과일장수에게 두개의 사과를 구매했다!"
	 객체 찾기-> 나 , 과일장수, 사과 

	[ 현실 세계 상황 재연 2 ]
	"나는 과일 장수에게  2000원을 주고 두개의 사과를 구매했다!"
	나(객체) 라는  객체가 ? 과일장수(객체)로부터  과일(객체)를 구매하는 동작(행동)를 표현 

	[ 현실 세계 상황 재연 3 ]	
	과일장수는 사과20개, 오렌지10개를 보유하고 있습니다. 	
	과일장수는 과일을 팝니다    	
	
*/		
		
//3. 객체 지향 프로그래밍 3단계
/*
1단계 :　현실세계의 객체를 모델링 하여 속성(데이터,상태)와 동작(기능,행동)을 추출 하는 단계
        요약 -> 현실 세계의 객체를 모델링 하는 단계

		속성(데이터,상태) -> 변수에 속성(데이터,상태)정보를 저장
		동작(기능,행동) -> 메소드로 표현

(1단계) 과일장수 객체 관점 으로 봤을때의 속성(데이터,상태) + 동작(기능,행동) 추출

	---과일장수의 속성(데이터,상태) 정보를 저장할 변수---
		1.사과 한 개당 가격을 저장할 변수 
		2.보유하고 있는 사과의 수를 저장할 변수
		3.판매수익을 저장할 변수
	
	---과일장수의 동작(기능,행동)을 메소드로 만들기---
		1.과일장수의 과일판매 동작(기능,행동)을 할 메소드
		2.사과판매후 남은 사과수,판매수익 출력 하는 기능의 메소드
		
(1단계) 과일구매자 객체 관점 으로 봤을때의 속성(데이터,상태) + 동작(기능,행동) 추출

	---과일구매자의 속성(데이터,상태) 정보를 저장할 변수---    
	    1.현재 소유하고 있는 현금을 저장할 변수
	    2.현재 소유하고 있는 사과수를 저장할 변수
	
	---과일구매자의 동작(기능,행동)을 메소드로 만들기---
		1.과일구매자의 과일구매 동작(기능,행동)을 할 메소드
		2.과일구매후 현재 남은 현금과 사과의수 출력 기능의 메소드 

*/
//(2단계) 클래스(설계도) 정의  :  변수 + 메소드
//과일장수 FruitSeller라는 이름의 class(설계도) 정의
class FruitSeller{
	//변수 생성
	//1. 사과 한 개 당 가격을 저장할 변수
	final int APPLE_PRICE = 1000;		//원래는 초기값을 지정하면 안 됨. 지금은 예제를 위해 초기값 설정
										// final <- 변수를 상수메모리로 전환. 값 변경 X. 상수명은 대문자, 변수명은 소문자로 구별!
	//2. 보유하고 있는 사과의 수를 저장할 변수
	int numofApple;
	
	//3. 판매수익을 저장할 변수
	int myMoney;
	
	//메소드 생성
	//1. 과일장수의 과일판매 동작의 메소드
	int saleApple(int money) { //사과 구매 금액을 과일구매자객체(FruitBuyer객체)로부터 매개변수로 받는다.
		//판매한 사과 갯수 구하기
		//-> 과일구매자객체(FruitBuyer객체)가 지불한 금액에 한 개당 가격을 나누면
		//   판매한 사과의 갯수를 구할 수 있음
		int num = money/APPLE_PRICE;
		
		//사과 판매 후 과일장수객체가 보유한 사과 갯수 차감
		numofApple -= num;
		
		//과일장수객체가 판매한 판매수익금액을 누적
		myMoney += money;
		
		return num; //실제 과일장수객체가 판매한 사과 갯수 반환
	}
	
	//2. 사과 판매 후 남은 사과수, 판매수익 출력하는 기능의 메소드
	public void showSaleResult() {
		System.out.println("과일장수객체의 남은 사과 갯수 : " + numofApple);
		System.out.println("과일장수객체의 현재 잔고 : " + myMoney);
	}
	
} //과일판매자(FruitSeller) class 정의 끝


//과일구매자 FruitBuyer라는 이름의 class(설계도) 정의
class FruitBuyer{
	//변수 생성
	//1.현재 소유하고 있는 현금을 저장할 변수
	int myMoney = 5000;
	
    //2.현재 소유하고 있는 사과수를 저장할 변수
	int numofApple = 0;
	
	//메소드 생성
	//1.과일구매자의 과일구매 동작(기능,행동)을 할 메소드
	public void buyApple(FruitSeller seller, int money) {//매개변수 -> 과일구매를 위한 과일장수(판매자)객체, 구매시 지불한 금액
		
		//과일장수(판매자)객체에게 과일을 구매하기위해
		//FruitSeller seller 매개변수로 전달받은 과일판매자객체(new FruitSeller())객체의
		//saleApple객체메소드 호출! 호출시 매개변수로 구매시 지불할 금액 전달
		//과일구매자객체는 구매한 사과 갯수를 반환받아 
		//과일구매자객체(FruitBuyer객체)의 numofApple에 누적
		numofApple += seller.saleApple(money);
		
		//과일판매자객체(FruitSeller)에게 과일 구매 후 현재 과일구매자(FruitBuyer)의 현금 차감
		myMoney -= money;
	}
	
	//2.과일구매후 현재 남은 현금과 사과의수 출력 기능의 메소드
	public void showBuyResult() {
		System.out.println("현재 잔액 : " + myMoney); //현재 남은 돈 출력
		System.out.println("보유 사과 수 : " + numofApple); //현재 보유한 사과 수 출력
	}
} //과일구매자(FruitBuyer) class 정의 끝

//프로그램 실행의 시작점이 되는 메인이 되는 클래스(설계도)
public class Ex1 {
	public static void main(String[] args) {
	//(3단계)객체 생성과 사용
		
		//1. 과일장수(판매자) 객체(FruitSeller)생성
		FruitSeller seller = new FruitSeller();
		seller.numofApple = 20; //판매자는 처음에 사과를 20개 가지고 있습니다.
		seller.myMoney = 0; //판매자는 잔액이 0원입니다.
		
		//2. 과일구매자 객체(FruitBuyer)생성
		FruitBuyer buyer = new FruitBuyer();
		
	//참고. 과일구매자는 5000원의 현금과 0개의 사과로 시작
		
		//3. 과일구매자객체(FruitBuyer)는 과일판매자(FruitSeller)객체에게 
		//   2000원을 지불하고 과일(사과) 구매하는 동작
		buyer.buyApple(seller, 2000);
		
		//4. 과일판매자객체의 현재 상황 출력
		System.out.println("-------------과일장수(판매자)객체의 현재 남은 돈과 사과 수----------------");
		seller.showSaleResult(); //사과 2개를 팔아 2000원의 수익을 얻고, 사과는 18개 남음.
		
		//5. 과일구매자객체의 현재 상황 출력
		System.out.println("-------------과일구매자객체의 현재 남은 돈과 사과 수----------------");
		buyer.showBuyResult(); //2000원 지불하여 사과 2개를 구매하고, 3000원 잔액이 남음.	

	}

}
