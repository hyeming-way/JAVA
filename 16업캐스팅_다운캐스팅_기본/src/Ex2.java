/*
 	업캐스팅이란?
 	- 부모클래스자료형의 참조변수에 
 	  여러 자식객체메모리의 주소를 대입하여 저장시키는 것
*/

//부모클래스
class Parent {
	public void parentPrn() {
		System.out.println("부모 Parent클래스의 parentPrn메소드");
	}
}

//자식클래스
class Child extends Parent {
	public void childPrn() {
		System.out.println("자식 Child클래스의 childPrn메소드");
	}	
}


public class Ex2 {
	public static void main(String[] args) {
		
		//주제1. 일반 기본자료형의 형변환(강제 캐스팅)
		int a = 10;
		
		long b = 20; //20L
		
		//8바이트 크기의 b변수메모리에
		//4바이트 크기의 a변수메모리에 저장된 정수10을 저장하려고 할 때
		//개발자가 직접 형변환(강제 캐스팅)을 해서
		//b = (long)a; 
		//  = (long)10; -> 10L
		b = a; //<- 이렇게만 적어도 자동형변환이 됨
		
		//------------------------------------------------------------
		
		//주제2. 객체메모리의 주소값을 대입하기 위한 참조변수를 만들 때
		//		가장 앞에 작성하는 참조자료형(클래스자료형, 인터페이스자료형....)
		
		//자기자신클래스자료형 참조변수 = new 자기자신클래스의생성자();
		Child c = new Child();
		
		//업캐스팅
		//문법		부모클래스자료형 참조변수명 = new 자식클래스생성자();
		
			//순서1. 부모클래스자료형 참조변수 먼저 선언
			Parent p;
			
			//순서2. 자식객체메모리 생성해서 주소번지를
			//		부모클래스자료형의 참조변수에 저장시키자
			p = c; //업캐스팅(자동으로 업캐스팅 가능)
		//	p = (Parent)c; <- 강제 업캐스팅도 가능
			
			//Parent p 부모클래스자료형의 참조변수로 
  			//부모 Parent클래스에 작성 해놨던 멤버(parentPrn()메소드)에만
  		    //접근 해서 호출할수있다
  			//자식 Child클래스에 작성 해놨던 멤버(childPrn()메소드)는
  			//접근 해서 호출할수 없다
  			//요약 : 업캐스팅의 단점
			
			p.parentPrn();
		//	p.childPrn(); <- 호출 불가능
			
		//업캐스팅의 단점을 보완 하기 위해 다운캐스팅 개념이 나옴 
		
	}
}
