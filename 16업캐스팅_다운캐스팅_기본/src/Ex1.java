/*
	다형성?
	하나로 다양한 형태의 성질을 지닐수 있도록 하는 방법
	
	다 : 다양한
	형 : 형태의
	성 : 성질을 지닐수 있다
	
	
	* 다양한 형태의 성질을 지닐수 있는 것들
	
		1. 메소드 오버로딩 : 같은 하나의 메소드이름을 사용하여 다양한 기능의 메소드를 여러개 정의하는 것
		
		2. 생성자 오버로딩 : 같은 이름으로 생성자를 여러개 정의하는 것
		
		3. 업캐스팅 : 부모클래스 자료형의 참조변수 하나를 만들어 상속관계에 있는 여러 자식클래스의 객체메모리를 생성해서
				    주소값을 대입해서 저장하는 것
				    
				    예) 부모클래스 A
				        자식클래스 B, 자식클래스 C
				        
				        부모클래스자료형 참조변수선언 = new 자식클래스의생성자();
				        	  A         a      = new B();
				        	  			a      = new C();	
*/

//부모클래스
class Tv {
	
	boolean power; //전원켜짐 true, 전원꺼짐 false
	int channel; //현재 채널 번호값
	
	//전원을 켜거나 끄는 기능을 하는 메소드
	public void power() {
		//만약 power 변수값이 false이면 true로 변경해서 저장
		//만약 power 변수값이 true이면 false로 변경해서 저장
		this.power = !power;
	}
	
	//현재 채널 번호를 1 증가시키는 기능의 메소드
	public void channelUp() {
		++channel;
	}
	
	//현재 채널 번호를 1 감소시키는 기능의 메소드
	public void channelDown() {
		--channel;
	}
	
}

//Tv의 기본기능이 있는 Tv부모클래스의 멤버들을 상속받아
//Tv화면에 자막내용을 추가로 보여줄 수 있는 CaptionTv 자식클래스 생성
//(기본기능 + 자막내용 출력)
class CaptionTv extends Tv {
	
	String text; //자막 내용 보여주기위해 자막내용 저장할 변수
	
	public void caption() {
		System.out.println("캡션기능이 추가된 CaptionTv자식클래스 기능");
	}
	
}
/*
	상속계층관계도  - 두클래스의 관계를 표현한 그림
	
	
			부모클래스명          Tv
			
			  ^				   ^
			  |				   |
			  
			자식클래스명  		  CaptionTv
	-------------------------------------------------
	
	     ┌──────────────────────┐
	     │       Tv (부모)       │
	     ├──────────────────────┤
	     │ power : boolean      │  // 전원 상태 변수
	     │ channel : int        │  // 채널 번호 변수
	     ├──────────────────────┤
	     │ power()              │  // 전원 ON/OFF 메서드
	     │ channelUp()          │  // 채널 증가 메서드
	     │ channelDown()        │  // 채널 감소 메서드
	     └──────────────────────┘
	              ▲
	              │
	    ┌─────────────────────────┐
	    │    CaptionTv (자식)      │
	    ├─────────────────────────┤
	    │ text : String           │  // 자막 내용 저장 변수
	    ├─────────────────────────┤
	    │ caption()               │  // 자막 출력 기능 메서드
	    └─────────────────────────┘
*/

public class Ex1 {
	public static void main(String[] args) {
		
		//부모클래스자료형 참조변수 = new 부모클래스의생성자();
		Tv tv = new Tv();
/*
	       ┌──────────────────────┐
	0x10 → │       Tv 객체         │  // 객체의 주소 (예: 0x10)
	       ├──────────────────────┤
	       │ power : boolean      │  // 전원 상태 (기본값: false)
	       │ channel : int        │  // 채널 번호 (기본값: 0)
	       ├──────────────────────┤
	       │ power()              │  // 전원 ON/OFF 기능
	       │ channelUp()          │  // 채널 증가 기능
	       │ channelDown()        │  // 채널 감소 기능
	       └──────────────────────┘
*/			
		
/*
		 	업캐스팅?
		 	- 부모클래스자료형의 참조변수에 여러 자식객체메모리를 생성하여 그 주소를 저장하는 것.
		 	- 작성 문법
		 			부모클래스자료형 참조변수 = new 자식클래스의생성자();
*/
		
		Tv t1 = new CaptionTv();
			t1.power = true;
			t1.channel = 1;
			t1.power();
			t1.channelUp();
			t1.channelDown();
			
		//	t1.text = "캡션TV2" //접근해서 사용 불가능
		//	t1.caption(); //접근해서 사용 불가능
			
/*	  
		       ┌──────────────────────────┐
		0x200 →│      CaptionTv 객체       │  // 객체의 주소 (예: 0x200)
		       ├──────────────────────────┤
		       │  **(부모 클래스: Tv)**   	  │
		       │ power : boolean = true   │  // 전원 상태
		       │ channel : int = 0        │  // 채널 번호
		       │ power()                  │  // 전원 ON/OFF 기능
		       │ channelUp()              │  // 채널 증가 기능
		       │ channelDown()            │  // 채널 감소 기능
		       ├──────────────────────────┤
		       │ **(자식 클래스: CaptionTv)**│
		       │ text : String = "캡션TV"  │  // 캡션 텍스트 저장
		       │ caption()                │  // 캡션 기능
		       └──────────────────────────┘


*/	
/*	            
	최종 결론
	- 부모 클래스자료형의 참조변수에 자식객체메모리생성후 주소를 저장(업캐스팅)
	  해 놓으면 부모클래스자료형으로 만든 참조변수는
	  자식객체 메모리의 주소번지를 저장해 놓을 지라도
	  부모 클래스 내부에 만들어 놓은 멤버(변수와메소드)에 접근을 할뿐
	  자식 객체 메모리에 있는 멤버(변수와 메소드)에 접근이 불가능하다.
	  
	- 업캐스팅의 장점
	   : 부모클래스자료형의 참조변수 하나만 만들어
	     여러 자식객체 메모리의 주소번지를 대입해서 저장할수 있다.
	     그러므로 참조변수는 하나만 생성해서 사용되니 메모리 낭비 줄일수 있음
	  업캐스팅의 단점
   	   :  부모 클래스 내부에 만들어 놓은 멤버(변수와메소드)에 접근을 할뿐
		  자식 객체 메모리에 있는 멤버(변수와 메소드)에 접근이 불가능하다.   
	             
*/				
			

	}

}
