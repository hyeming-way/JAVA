

//예제 : 다운캐스팅
/*
	업캐스팅 단점
	- 업캐스팅으로 인한 부모클래스자료형 참조변수로 접근해서
	  자식객체메모리 전체의 영역중에서 사용할 수 있는 멤버의 범위가 작았다.
	  즉, 부모클래스 내부에 작성된 멤버에만 접근이 가능했다.
	  
	다운캐스팅?
	- 부모클래스 자료형의 참조변수에 저장된 자식객체메모리전체(부모멤버+자식멤버)의
	  멤버들을 참조(접근해서 사용)할 수 있도록
	  자식클래스 자료형의 참조변수 선언 후 부모클래스자료형의 참조변수에 저장되어 있던
	  자식객체메모리 주소를 저장하는 것
	  
	  예)	Parent P = new Child(); <-- 업캐스팅
	  		
	  		Child c = (child)p; <-- 다운캐스팅
	  		
	  		c 참조변수에 저장된 new Child()객체메모리 전체의 모든 멤버들을 접근해서 사용할 수 있게 됨.	  	
	  		
	  		**주의! 업캐스팅 없이 다운캐스팅 단독으로 사용 불가!
	  			   업캐스팅 후 다운캐스팅 해야함
*/

//부모클래스
class A {
	int a, b;
}

//자식클래스
class B extends A {
	int c;
}

public class Ex3 {
	public static void main(String[] args) {
		
		//업캐스팅 문법
		//부모클래스자료형 참조변수 = new 생성할자식클래스의생성자();
		A a = new B();
		
		a.a = 10;
		a.b = 20;
		//부모클래스의 멤버에는 접근 가능
		
	//	a.c = 30; <-- 자식클래스의 멤버에는 접근 불가능		(업캐스팅의 단점)
		
		//다운캐스팅 문법
		//자식클래스자료형 참조변수 = (자식클래스명)부모클래스자료형의 참조변수명;
		B b = (B)a;
		//다운캐스팅으로인해 b참조변수로 생성된 new Child()자식객체메모리 내부에 만들어져있는 모든 인스턴스변수(멤버들)에 접근가능
		//즉! 접근해서 사용할 수 있는 멤버들의 갯수가 늘어났음
		b.a = 10;
		b.b = 20;
		b.c = 30;
		//다운캐스팅은 자식클래스 자료형에 적었던 B클래스 내부에 상속 포함한 모든 멤버들에 모두 접근 가능하게한다.
		
			
		
		
		
		

	}

}
