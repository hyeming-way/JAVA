

//주제 : 자바에서 클래스 안의 멤버메소드 살펴보기

class AAA{
	
	int num; //인스턴스변수(객체변수)
	static int staticNum; //클래스변수
	
	public AAA() {} //기본생성자
	
	//멤버메소드? 클래스 내부에 만들어져있는 메소드들 전체를 말함
	
	//멤버메소드 종류
	
	//1. 인스턴스메소드 : static을 붙이지 않고 작성된 메소드
	// 1.1 특징
	//- static 키워드를 사용하지 않은 메소드
	//- 객체(인스턴스)가 생성되어야만 사용 가능
	//- this 키워드를 사용하여 인스턴스 변수와 다른 인스턴스 메소드에 접근 가능
	//- 클래스 변수(static 변수)에도 접근 가능
	//1.2 메모리 저장 위치
	//- 힙(Heap) 영역에 생성된 객체 내부에 존재
	//1.3 호출 방법
	//- 반드시 객체를 생성한 후 호출해야 함
	//- 문법
	//		클래스명 객체명 = new 클래스명();
	//		객체명.메소드명();
	
	//2. 클래스메소드 : static을 붙여 작성된 메소드
	// 2.1 특징
	//- static 키워드를 사용하여 정의
	//- 객체를 생성하지 않아도 호출 가능
	//- 클래스 변수(static 변수)에는 접근 가능
	//- 그러나 인스턴스 변수에는 접근 불가능 (객체가 없어도 실행되기 때문)
	//- 객체 없이 호출되므로 this 키워드 사용 불가능
	//
	// 2.2 메모리 저장 위치
	// - JVM의 메소드(Method) 영역에 저장됨
	// - 프로그램 실행 종료 시까지 유지
	//
	// 2.3 호출 방법
	//- 클래스명으로 직접 호출 가능
	//- 문법
	//		클래스명.메소드명();
	
	//인스턴스메소드 정의
	//기능 : 정수하나를 매개변수로 전달받아 인스턴스변수와 클래스변수값 누적
	public void add(int value) {
		this.num += value; //인스턴스변수에 누적
		AAA.staticNum += value; //클래스변수에 누적
		//this.staticNum += value; <- 사용가능하지만 클래스명.으로 접근하는 방법이 더 좋음
		//참조변수역할을 하는 this를 사용해도 되지만
		//클래스명.클래스변수명 으로 접근하는 것이 더 좋은 사용법이다
		//사용법 -> 클래스명.클래스변수명 += 매개변수명;
		
		
	}
	
	//num인스턴스변수에 저장되어있는 값을 외부로 반환하는 기능의 인스턴스 메소드 getNum만들기
	public int getNum() {
		return this.num; //인스턴스변수 x의 값 가져와 반환
		//return AAA.staticNum; //인스턴스메소드 내부에서 클래스변수 값 반환 가능
	}
	
	//num인스턴스변수에 저장되어 있는 값을 변경하기위한 인스턴스 메소드 setNum만들기
	public void setNum(int num) {
		this.num = num;
		//AAA.staticNum = num; //인스턴스메소드 내부에서 클래스변수 값 변경 가능
	}
	
	//static을 작성해서 클래스메소드(JVM의 Method영역에 클래스와 같이 올라가는 메소드)만들기
	public static int getStaticNum() {
		return AAA.staticNum;
		//return this.num; //클래스 메소드 내부에서 인스턴스변수값 반환 불가능
	}
	
	//static을 작성해서 클래스메소드(JVM의 Method영역에 클래스와 같이 올라가는 메소드)만들기
	public static void setStaticNum(int staticNum) {
		AAA.staticNum = staticNum;
		//this.num = staticNum; //클래스 메소드 내부에서 인스턴스변수값 변경 불가능
		
	}
	
}


public class Ex2 {

	public static void main(String[] args) {
		
		AAA aaa = new AAA();
		
		//클래스변수 staticNum의 값 변경 사용법 2가지
		//사용법1. 클래스명.클래스변수명 = 변경할값;
		AAA.staticNum = 50; //올바른 사용법
		//사용법2. 클래스자료형의 참조변수명.클래스변수명 = 변경할값;
		aaa.staticNum = 50; //가능은 하지만, 경고 표시가 나올 수 있음 (비추천)
		
		//클래스메소드 호출하는 사용법 2가지
		//사용법1. 클래스명.클래스메소드명();
		System.out.println(AAA.getStaticNum()); //50	올바른 사용법
		//사용법2. 클래스자료형의 참조변수명.클래스메소드명();
		System.out.println(aaa.getStaticNum()); //50	비추천	
		
		//(비추천) 이유:
		//객체(인스턴스)를 통해 클래스 변수나 메소드에 접근하면,
		//마치 개별 객체마다 다른 값을 가질 것처럼 보일 수 있습니다.
		//하지만 static 변수는 객체와 상관없이 하나의 메모리를 공유하므로, 
		//클래스명을 사용하는 것이 더 정확합니다.
		
		
		/*
		  결론
		  1️. 인스턴스 변수와 클래스 변수 차이
			num → 인스턴스 변수: 객체(인스턴스)가 생성될 때마다 개별적으로 존재
			staticNum → 클래스 변수: 클래스가 로드될 때 한 번만 생성되며, 모든 객체가 공유
		     
		  2️.인스턴스 메소드 vs 클래스 메소드
			2.1 인스턴스 메소드 (add, getNum, setNum)
				- 객체가 생성된 후 호출 가능
				- this를 사용해 인스턴스 변수 접근 가능
				- 클래스 변수도 접근 가능 (하지만 AAA.staticNum으로 접근하는 것이 더 명확)
			
			2.2 클래스 메소드 (getStaticNum, setStaticNum)
				- 객체 생성 없이 호출 가능
				- 클래스 변수(staticNum)에는 접근 가능하지만,
				  인스턴스 변수(num)에는 접근할 수 없음
		  
		  3. 클래스 메소드 내부에서는 인스턴스 변수에 접근 불가능
		     그러나 인스턴스 메소드 내부에서는 인스턴스변수 뿐만아니라
		     클래스변수에 접근 가능
		     
		  4. ! 경고 느낌표의 뜻
		     -> 정적인 클래스변수,클래스메소드는 
		        클래스명.클래스변수 또는 클래스메소드를 호출하여
		        접근해서 사용하라는 의미 입니다.   
		*/		

	}

}
