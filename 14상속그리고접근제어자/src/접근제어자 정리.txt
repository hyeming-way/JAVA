접근 제어자의 역할 정리

주제 :  자바의 접근 제어자
- 클래스 설계도 자체에서의 접근과 
  객체를 생성했을 때의 접근 모두를 제어하는 데 사용됩니다.
 이를 통해 특정 클래스나 객체의 멤버 변수, 메서드에 접근할 수 있는 범위를 제한할 수 있습니다.

자세한 설명
1. 클래스 설계 단계에서의 접근
   - 클래스 내부에 정의된 필드(변수)와 메서드에 대해, 해당 클래스 외부에서 접근할 수 있는지 여부를 정의합니다.
   - 설계도 자체에서 **다른 클래스**나 **패키지**가 이 멤버들에 접근할 수 있는지 설정합니다.

2. 객체를 생성했을 때의 접근
   - 실제로 객체가 생성된 후, 해당 객체의 특정 변수나 메서드에 접근할 수 있는지를 제어합니다.
   - 객체가 생성되면 접근 제어자에 따라 외부클래스에서 그 객체의 멤버(변수나메소드)에 접근할 수 있는 범위가 결정됩니다.

참고.  class , 변수, 메소드 등에 접근 제어자를 붙일수 있는데  
        class는 사용해야 하므로 default 또는 public으로 만 작성해야함

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

주제 :  자바의 대표적인 접근 제어자들의 종류 정리 
- public : 클래스, 패키지, 객체 모두 접근 가능.
- protected : 같은 패키지의 다른 클래스 또는  자식클래스,
                그리고  같은 패키지의 다른 클래스 내부의 자식 또는 부모 객체 메모리에서 모두 접근 가능
                또한 
                다른 패키지의 자식클래스에서 부모클래스의 멤버 
                그리고 다른 패키지의 다른클래스 내부의 자식 객체 메모리에서 부모객체메모리의 멤버(변수또는메소드)에  접근 가능.

- default (아무 접근 제어자를 지정하지 않았을 때): 
        	default 로 작성한 변수가 작성된  같은 패키지 내의 자기자신의 클래스 내부에서 접근 가능. 
	또한
            같은 패키지의 다른 클래스 내부에서  default 로 작성한 변수가 작성된 클래스의 객체 메모리 내부에서 접근 가능.
	요약 : 같은 패키지 내부라면  default로 작성한 변수나 메소드는 모두 접근을 허용함 


- private: 
 해당 클래스 내부에서만 접근 가능.
 또한
 해당 클래스의 객체 메모리 내부에서만 접근 가능 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

주제 : 클래스 설계와 객체 생성 후 접근

1.클래스 설계도에서의 접근 제어:
클래스나 객체의 구조를 설계하는 단계에서 접근 제어자가 설정됩니다. 
클래스 내부의 변수와 메서드가 외부에서 어느 정도까지 노출되고, 사용 가능한지를 결정합니다. 
이 단계에서 각 클래스의 멤버(변수나 메소드)에 어떤 접근 제어자를 붙일지 선택함으로써 클래스 외부에서 해당 멤버에 접근할 수 있는지 제어할 수 있습니다.

2.객체 생성 후의 접근 제어:
객체가 실제로 생성된 이후에도, 앞서 설계한 클래스 설계도에 작성한  접근 제어자의 규칙은 그대로 적용됩니다. 
생성된 객체의  변수나 메서드에 접근하려고 할 때, 
각 멤버에 붙은 접근 제어자가 외부에서의 접근을 허용할지, 막을지를 결정하게 됩니다.


결론 : 따라서 접근 제어자는 클래스 설계도에서 멤버의 접근 가능 여부를 미리 정의하고, 
        객체가 생성된 후에도 그 접근 제한을 따르게 됩니다.

--------------------------------------------------------
접근 제어자 사용 시의 중요한 개념들

캡슐화: 외부에서 객체의 상태를 함부로 변경하지 못하도록 보호하며, 
          필요한 경우에만 제한된 방식으로 접근을 허용하는 것.

정보 은닉: 내부 구현을 숨기고 외부에서는 필요한  public 멤버만 노출하는 것.

재사용성: protected 접근 제어자를 사용하여 자식 클래스에서 상속을 통해 재사용 가능하게 합니다.











