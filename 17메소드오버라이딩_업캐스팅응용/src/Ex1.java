/*
  메소드 오버라이딩?
  - 상속관계에서 부모클래스 메소드의 선언부(접근제어자,static, 반환자료형, 메소드명, 매개변수 영역)
    을 자식클래스에 모두 동일하게 작성하되,
    부모클래스 메소드의 구현부 {  }중괄호 부분을
    자식클래스의 기능에 맞게 재작성하는 기술
    
    요약 : 부모클래스의 메소드를 그대로 자식클래스 가져와 작성하되,
          메소드의 {  } 내부의 구현코드를 재작성하는것.  

  예)   
  
  		class A { //부모클래스
  		
  		    //정수 하나를 매개변수로 받아 출력 기능의 메소드 
  			public void print(int num){  <--- 메소드의 선언부
  			
  				//{} 중괄호 내부 영역 <--------메소드의 구현부
  				System.out.println(num);
  			}  		
  		}
  		//-----------------------------------------------------
  		class B extends A{ //자식클래스 
  		
  		메소드 오버라이딩 : 부모클래스의 메소드 구현부 재작성
  		
  			@Overried
  			//1.부모클래스로부터 상속받은 메소드의 선언부를 그대로 작성하되 
  			public void print(int num){  <--- 메소드의 선언부
  			
  				//2. 메소드 구현부 B클래스의 기능에 맞게 재작성
  				System.out.println(num + 1);
  			}  	
  		
  		
  		}
//-----------------------------------------------

     - 메소드 오버라이딩 하는 목적
      	자식클래스에서 부모클래스와 동일한 이름의 메소드를 새롭게 정의해서
      	부모클래스의 메소드 기능은 더이상 사용하지 않고,
      	자식클래스에서 새롭게 재정의한 메소드 기능을 사용하도록 하기 위함.  
*/

//부모클래스
class A {
	public void print(int num) { //부모A클래스의 메소드 선언부
		//부모A클래스의 메소드 구현부
		System.out.println(num);
	}
}

//자식클래스
class B extends A {
	
	@Override 
	//어노테이션 의미
	// -> 아래에 작성해놓은 메소드는 부모A클래스로부터 오버라이딩된 메소드다.라고 자바컴파일러에게 알려주는 기호
	
	public void print(int num) {
		System.out.println(num + 1);
	}
	//메소드 오버라이딩 : 부모A클래스에 만들어져 있는 print메소드의 선언부는 그대로 가져와 작성하되
	//				  print메소드의 {} 중괄호 영역(구현부) 재작성(재정의)
	
	//오버라이딩 단축키
	//alt + shift + s v
	
	//B 자식클래스의 메소드
	public void bInfo() {
		System.out.println("B자식클래스의 bInfo메소드이다.");
	}
	
}

public class Ex1 {
	public static void main(String[] args) {
		
		//자식 B클래스의 객체 생성
		B b = new B();
		b.bInfo();
		b.print(10); //메소드오버라이딩(재작성)된 메소드 호출가능
					 //11
		
		//부모 A클래스의 객체 생성
		A a = new A();
		a.print(10); //10
		
		//요약
		//1. 메소드 오버라이딩이란 무엇이며
		//2. 자식클래스에 메소드 오버라이딩을 해놓고
		//	 자식객체메모리 생성후 메소드 오버라이딩된 메소드를 호출하면
		//	 오버라이딩된 메소드가 호출되어 실행된다.
		//	 즉! 부모클래스로부터 메소드 오버라이딩된 메소드는 상속 안 됨

	}

}
